"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
const rpc_1 = require("../rpc/rpc");
const ClientProvider_1 = require("./ClientProvider");
class Client extends ClientProvider_1.ClientProvider {
    constructor({ host, verbose }) {
        super();
        this.ready = false;
        this.rpc = new rpc_1.RpcClient({
            host,
            verbose,
        });
    }
    async connect() {
        return this.rpc.connect();
    }
    disconnect() {
        this.rpc.disconnect();
    }
    isReady() {
        return this.ready;
    }
    async ping() {
        try {
            const resp = await this.getInfo();
            const synced = resp.isSynced;
            const indexed = resp.isUtxoIndexed;
            this.ready = synced && indexed;
        }
        catch (error) {
            this.ready = false;
        }
        return this.ready;
    }
    request(method, data) {
        return this.rpc.call(method, data);
    }
    subscribe(method, data, callback) {
        return this.rpc.subscribe(method, data, callback);
    }
    unSubscribe(method, uid = "") {
        return this.rpc.unSubscribe(method, uid);
    }
    getBlock(data) {
        return this.request("getBlockRequest", data);
    }
    getUtxosByAddresses(data) {
        return this.request("getUtxosByAddressesRequest", data);
    }
    getBalanceByAddress(data) {
        return this.request("getBalanceByAddressRequest", data);
    }
    getBalancesByAddresses(data) {
        return this.request("getBalancesByAddressesRequest", data);
    }
    getVirtualSelectedParentBlueScore() {
        return this.request("getVirtualSelectedParentBlueScoreRequest", {});
    }
    submitBlock(data) {
        return this.request("submitBlockRequest", data);
    }
    getBlockTemplate(data) {
        return this.request("getBlockTemplateRequest", data);
    }
    submitTransaction(data) {
        return this.request("submitTransactionRequest", data);
    }
    getBlockDagInfo() {
        return this.request("getBlockDagInfoRequest", {});
    }
    getInfo() {
        return this.request("getInfoRequest", {});
    }
    estimateNetworkHashesPerSecond(data) {
        return this.request("estimateNetworkHashesPerSecondRequest", data);
    }
    getCoinSupply() {
        return this.request("getCoinSupplyRequest", {});
    }
    getCurrentNetwork() {
        return this.request("getCurrentNetworkRequest", {});
    }
    getPeerAddresses() {
        return this.request("getPeerAddressesRequest", {});
    }
    getSelectedTipHash() {
        return this.request("getSelectedTipHashRequest", {});
    }
    getMempoolEntry(data) {
        return this.request("getMempoolEntryRequest", data);
    }
    getMempoolEntries(data) {
        return this.request("getMempoolEntriesRequest", data);
    }
    getConnectedPeerInfo() {
        return this.request("getConnectedPeerInfoRequest", {});
    }
    getSubnetwork(data) {
        return this.request("getSubnetworkRequest", data);
    }
    getVirtualSelectedParentChainFromBlock(data) {
        return this.request("getVirtualSelectedParentChainFromBlockRequest", data);
    }
    getBlocks(data) {
        return this.request("getBlocksRequest", data);
    }
    getBlockCount() {
        return this.request("getBlockCountRequest", {});
    }
    getHeaders(data) {
        return this.request("getHeadersRequest", data);
    }
    getMempoolEntriesByAddresses(data) {
        return this.request("getMempoolEntriesByAddressesRequest", data);
    }
    subscribeNewBlockTemplate(callback) {
        return this.subscribe("notifyNewBlockTemplateRequest", {}, callback);
    }
    unSubscribeNewBlockTemplate(uid = "") {
        this.unSubscribe("notifyNewBlockTemplateRequest", uid);
    }
    subscribeVirtualDaaScoreChanged(callback) {
        return this.subscribe("notifyVirtualDaaScoreChangedRequest", {}, callback);
    }
    unSubscribeVirtualDaaScoreChanged(uid = "") {
        this.unSubscribe("notifyVirtualDaaScoreChangedRequest", uid);
    }
    subscribePruningPointUTXOSetOverride(callback) {
        return this.subscribe("notifyPruningPointUTXOSetOverrideRequest", {}, callback);
    }
    unSubscribePruningPointUTXOSetOverride(uid = "") {
        this.unSubscribe("notifyPruningPointUTXOSetOverrideRequest", uid);
    }
    subscribeBlockAdded(callback) {
        return this.subscribe("notifyBlockAddedRequest", {}, callback);
    }
    unSubscribeBlockAdded(uid = "") {
        this.unSubscribe("notifyBlockAddedRequest", uid);
    }
    subscribeVirtualSelectedParentBlueScoreChanged(callback) {
        return this.subscribe("notifyVirtualSelectedParentBlueScoreChangedRequest", {}, callback);
    }
    unSubscribeVirtualSelectedParentBlueScoreChanged(uid = "") {
        this.unSubscribe("notifyVirtualSelectedParentBlueScoreChangedRequest", uid);
    }
    subscribeUtxosChanged(data, callback) {
        return this.subscribe("notifyUtxosChangedRequest", data, callback);
    }
    unSubscribeUtxosChanged(uid = "") {
        this.unSubscribe("notifyUtxosChangedRequest", uid);
    }
    subscribeVirtualSelectedParentChainChanged(data, callback) {
        return this.subscribe("notifyVirtualSelectedParentChainChangedRequest", data, callback);
    }
    unSubscribeVirtualSelectedParentChainChanged(uid = "") {
        this.unSubscribe("notifyVirtualSelectedParentChainChangedRequest", uid);
    }
}
exports.Client = Client;
