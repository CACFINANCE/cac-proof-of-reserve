"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Address = void 0;
const Utils_1 = require("./Utils");
const Wallet_1 = require("./Wallet");
class Address {
    constructor(clientProvider, index, address, privateKey) {
        this.clientProvider = clientProvider;
        this.index = index;
        this.address = address;
        this.privateKey = privateKey;
    }
    /**
     * Sends all the available balance to the specified `recipient`
     */
    async sendAll({ recipient, fee = Wallet_1.Config.DEFAULT_FEE, priorityFee = 0, }) {
        if (!recipient) {
            throw new Error("params missing");
        }
        const utxos = await this.utxos();
        const balance = Utils_1.Utils.getUtxosSum(utxos);
        const outputs = [{ recipient, amount: balance }];
        let finalizedFee = fee;
        if (fee === Wallet_1.Config.DEFAULT_FEE) {
            finalizedFee = await Utils_1.Utils.estimateFee({
                utxos,
                outputs,
            });
        }
        const amountAfterFee = balance - finalizedFee - BigInt(priorityFee);
        outputs[0].amount = amountAfterFee;
        return Utils_1.Utils.sendTransaction({
            clientProvider: this.clientProvider,
            utxos,
            privateKeys: [this.privateKey],
            outputs,
            changeAddress: recipient,
            fee: finalizedFee,
            priorityFee,
        });
    }
    /**
     * Create and submit a transaction, where `ouputs` can contain
     *  multiple `recipient`
     */
    async send({ outputs, changeAddress = this.address, fee = Wallet_1.Config.DEFAULT_FEE, priorityFee = 0, }) {
        if (outputs.length === 0 || !changeAddress) {
            throw new Error("params missing");
        }
        const utxos = await this.utxos();
        let finalizedFee = fee;
        if (fee === Wallet_1.Config.DEFAULT_FEE) {
            finalizedFee = await Utils_1.Utils.estimateFee({
                utxos,
                outputs,
            });
        }
        return Utils_1.Utils.sendTransaction({
            clientProvider: this.clientProvider,
            utxos,
            privateKeys: [this.privateKey],
            outputs,
            changeAddress,
            fee: finalizedFee,
            priorityFee,
        });
    }
    /**
     * Return balance of the address
     */
    balance() {
        return this.clientProvider
            .getBalanceByAddress({
            address: this.address,
        })
            .then((resp) => BigInt(resp.balance));
    }
    /**
     * Return a list of UTXOs for the address
     */
    utxos() {
        return this.clientProvider
            .getUtxosByAddresses({
            addresses: [this.address],
        })
            .then((resp) => resp.entries);
    }
    /**
     * Return a string representation of the address
     * e.g. kaspa:xxxxxx
     */
    toString() {
        return this.address;
    }
}
exports.Address = Address;
